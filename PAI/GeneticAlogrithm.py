# -*- coding: utf-8 -*-
"""TuPro1_PAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TBpabUzydO15WD5rFOVyxQQMRILZGHza

#GENETIC ALGORITHM

Tugas Pemrograman 1 PAI: Genetic Algorithm <br>
Kelompok :<br>
1.   VINCENTIUS ARNOLD FRIDOLIN / 1301190221
2.   REYHAN FADHLUROHMAN ARRAFI / 1301190356
"""

import math
import numpy as np
import pandas as pd
import random 
import matplotlib.pyplot as plt

"""ℎ(𝑥, 𝑦) = (cos(𝑥^2) ∗ sin(𝑦^2)) + (𝑥 + 𝑦)

−1 ≤ 𝑥 ≤ 2 dan −1 ≤ 𝑦 ≤ 1.
"""

probXover = 0.7
probMutat = 0.1

"""jumlah populasi = 20 <br>
fitnessthreshold = 3

#Run All

### Fungsi Tambahan

sigma
"""

def sigma(N):
  temp = int(0)
  for i in range(1, N + 1):
    temp += pow(2, -1 * i)
  return temp

"""list to string convert"""

def to_string(binary):
  str1 = ''
  for ele in binary:
    str1 += ele
  
  return str1

"""Float to Binary"""

def genotype(x, min, max):
  binary = str('')
  dec = ((x - (min)) * sigma(5))/(max - min)

  binary = []
  i = 1
  while len(binary) != 5:
    if dec - pow(2, -1 * i) > 0:
      dec -= pow(2, -1 * i)
      binary.append('1')
    else:
      binary.append('0')
    i += 1
  return to_string(binary)

def to_decimal(numb, max, min):
  return min + ((max - min)/sigma(5)) * (int(numb[0]) * pow(2, -1) + int(numb[1]) * pow(2, -2) + int(numb[2]) * pow(2, -3) + int(numb[3]) * pow(2, -4) + int(numb[4]) * pow(2, -5))

"""## Generasi Kromosom secara random

### Kromosom X
"""

chrom_x = []
for i in range(20):
  rand_x = round(np.random.uniform(-1, 2),3)
  chrom_x.append(rand_x)

chrom_x

binary_chromX = []
for item in chrom_x:
  binary_chromX.append(genotype(item, -1, 2))
binary_chromX

table_x = {'chromosome x': chrom_x,
        'binary value': binary_chromX,
        }
pd.DataFrame(table_x)

"""### Kromosom Y"""

chrom_y = []
for i in range(20):
  rand_y = round(np.random.uniform(-1, 1),3)
  chrom_y.append(rand_y)

chrom_y

binary_chromY = []
for item in chrom_y:
  binary_chromY.append(genotype(item, -1, 1))
binary_chromY

table_y = {'chromosome y': chrom_y,
        'binary value': binary_chromY,
        }
pd.DataFrame(table_y)

"""## Hitung Fitness"""

def CountFit(x, y):
  return float(math.cos(math.radians(pow(x, 2))) * math.sin(math.radians(pow(y, 2))) + x + y)

fitness = []
for i in range(0, len(chrom_x) and len(chrom_y)):
  fitness.append(CountFit(chrom_x[i], chrom_y[i]))
fitness

table_fitness = {'Kromosom X': chrom_x,
                'kromosom Y': chrom_y,
                'fitness value': fitness,
                }
pd.DataFrame(table_fitness)

ax = plt.axes(projection='3d')
ax.scatter3D(chrom_x, chrom_y, fitness);

sum_fitness = sum(fitness)
pi = []
for item in fitness:
  pi.append(item/sum_fitness)
temp = {'Kromosom X': chrom_x,
        'kromosom Y': chrom_y,
        'fitness': fitness,
        'pi': pi,
        }
pd.DataFrame(temp)

del(temp)

sum_fitness

"""## Pemilihan Orang Tua

Dari fitness yang kita dapat, cari 2 pasang kromosom yang memiliki nilai terkecil. Kemudian kita akan lakukan crossover
"""

def rouletteWheel(fitness):
  r = random.uniform(0, 1)
  indv = 0
  while r > 0:
    r -= pi[indv]
    indv += 1
  return indv - 1

"""## Mutasi"""

def mutation(binary):
  binary = list(binary)
  for i in range(len(binary)):
    if binary[i] == '0':
      binary[i] = '1'
      break
  binary = to_string(binary)

  return binary

"""##X Over"""

def xover(binary_1, binary_2):
  #two point

  point1, point2 = 4, 6

  temp = binary_1[point1 - 1 : point2 + 1]
  binary_1[point1 - 1 : point2 + 1] = binary_2[point1 - 1 : point2 + 1]
  binary_2[point1 - 1 : point2 + 1] = temp

"""## Proses Regenerasi"""

fitnesstreshold = 3

generasi = []
generasi += [1]*len(fitness)

#insertionSort(fitness, chrom_x, chrom_y)
table_fitness = {'Generasi': generasi,
                'Kromosom X': chrom_x,
                'kromosom Y': chrom_y,
                'fitness value': fitness,
                }
print(pd.DataFrame(table_fitness), end='\n\n')

regenerasi = 2

while max(fitness) < fitnesstreshold:

  a = rouletteWheel(fitness)
  b = rouletteWheel(fitness)
  while a == b:
    b = rouletteWheel(fitness)

  print(a, b)

  parent1 = binary_chromX[a] + binary_chromY[a]
  parent2 = binary_chromX[b] + binary_chromY[b]

  # print(parent1, parent2)
  # print(binary_y1[0], binary_y2[0])
  
  parent1, parent2 = list(parent1), list(parent2)
  if random.uniform(0, 1) < probXover :

    xover(parent1, parent2)

    parent1 = to_string(parent1)
    parent2 = to_string(parent2)

    # print(parent1, parent2)
    # print(binary_y1[0], binary_y2[0])

    if random.uniform(0, 1) < probMutat:
      if random.randint(0, 2) % 2 == 1 :
        parent1 = mutation(parent1)
      else:
        parent2 = mutation(parent2)

    # Pisah Kromosom

    krom_x1, krom_y1 = parent1[:5], parent1[5:10]
    krom_x2, krom_y2 = parent2[:5], parent2[5:10]

    dec1, dec2 = to_decimal(krom_x1, 2, -1), to_decimal(krom_y1, 1, -1)
    dec3, dec4 = to_decimal(krom_x2, 2, -1), to_decimal(krom_y2, 1, -1)
    
    fitness1 = CountFit(dec1, dec2)
    fitness2 = CountFit(dec3, dec4)

    # Survivor Selection
    pertukaran = 0

    for j in range(2):
      not_survive = fitness.index(min(fitness))
      if j == 0 :
        if fitness1 > fitness[not_survive] :
          generasi[not_survive] = regenerasi
          binary_chromX[not_survive] = krom_x1
          binary_chromY[not_survive] = krom_y1
          chrom_x[not_survive] = dec1
          chrom_y[not_survive] = dec2
          fitness[not_survive] = fitness1
          pertukaran = 1
      elif j == 1 :
        if fitness2 > fitness[not_survive] :
          generasi[not_survive] = regenerasi
          binary_chromX[not_survive] = krom_x2
          binary_chromY[not_survive] = krom_y2
          chrom_x[not_survive] = dec3
          chrom_y[not_survive] = dec4
          fitness[not_survive] = fitness2
          pertukaran = 1
        
        if pertukaran == 1:
          regenerasi += 1
          print(pd.DataFrame(table_fitness), end='\n\n')

"""# Result"""

terbaik = fitness.index(max(fitness))
chrom_x[terbaik], chrom_y[terbaik], fitness[terbaik]